#!/usr/bin/env ruby
# frozen_string_literal: true

#
# This file was generated by Bundler.
#
# The application 'bundle' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require 'rubygems'

m = Module.new do
  module_function

  def invoked_as_script?
    File.expand_path($PROGRAM_NAME) == File.expand_path(__FILE__)
  end

  def env_var_version
    ENV['BUNDLER_VERSION']
  end

  def cli_arg_version
    return unless invoked_as_script?
    return unless update_command?

    extract_bundler_version_from_args
  end

  def update_command?
    'update'.start_with?(ARGV.first || ' ')
  end

  def extract_bundler_version_from_args
    bundler_version = nil
    update_index = nil

    ARGV.each_with_index do |arg, index|
      bundler_version = find_bundler_version(arg, update_index, index)
      update_index = index if arg =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
    end

    bundler_version
  end

  def find_bundler_version(arg, update_index, index)
    if update_index && update_index.succ == index && arg.match?(Gem::Version::ANCHORED_VERSION_PATTERN)
      return arg
    end

    Regexp.last_match(1) if arg =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
  end

  def gemfile
    gemfile = ENV['BUNDLE_GEMFILE']
    return gemfile if gemfile && !gemfile.empty?

    File.expand_path('../Gemfile', __dir__)
  end

  def lockfile
    case File.basename(gemfile)
    when 'gems.rb'
      gemfile.sub(/\.rb$/, '.locked')
    else
      "#{gemfile}.lock"
    end
  end

  def lockfile_version
    return unless File.file?(lockfile)

    lockfile_contents = File.read(lockfile)
    extract_version_from_lockfile(lockfile_contents)
  end

  def extract_version_from_lockfile(contents)
    return unless contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/

    Regexp.last_match(1)
  end

  def bundler_requirement
    @bundler_requirement ||= begin
      env_var_version || cli_arg_version || bundler_requirement_for(lockfile_version)
    end
  end

  def bundler_requirement_for(version)
    return "#{Gem::Requirement.default}.a" unless version

    Gem::Version.new(version).approximate_recommendation
  end

  def load_bundler!
    ENV['BUNDLE_GEMFILE'] ||= gemfile
    activate_bundler
  end

  def activate_bundler
    gem_error = activation_error_handling { gem 'bundler', bundler_requirement }
    return if gem_error.nil?

    handle_activation_error(gem_error)
  end

  def handle_activation_error(gem_error)
    require_error = activation_error_handling { require 'bundler/version' }
    if require_error.nil? && bundler_version_satisfies_requirement?
      return
    end

    display_activation_warning(gem_error)
    exit 42
  end

  def bundler_version_satisfies_requirement?
    Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
  end

  def display_activation_warning(gem_error)
    warn <<~WARNING
      Activating bundler (#{bundler_requirement}) failed:
      #{gem_error.message}

      To install the version of bundler this project requires, run `gem install bundler -v '#{bundler_requirement}'`
    WARNING
  end

  def activation_error_handling
    yield
    nil
  rescue StandardError, LoadError => e
    e
  end
end

m.load_bundler!

load Gem.bin_path('bundler', 'bundle') if m.invoked_as_script?